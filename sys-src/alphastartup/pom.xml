<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>promed</groupId>
		<artifactId>alphaconfigfull</artifactId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../alphaconfigfull</relativePath>
	</parent>

	<artifactId>alphastartup</artifactId>
	<name>alpha-Startup (with One-Jar-Bundling)</name>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>alphamodel</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>alphaeditor</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>alphainjector</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>alphadoyen</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- Handling CLI parameters -->
		<!-- <dependency> <groupId>commons-cli</groupId> <artifactId>commons-cli</artifactId> 
			<version>${lib.commons-cli.version}</version> </dependency> -->

		<!-- LOGGING -->
		<!-- the slf4j jars -->
		<!-- (API package required for PropertyDefiner (extends PropertyDefinerBaseBase) -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${lib.slf4j.version}</version>
		</dependency>

		<!-- redirect all other over slf4j -->
		<dependency>
			<!-- FINEST � FINER � FINE � CONFIG � INFO � WARNING � SEVERE -->
			<!-- remember to call: SLF4JBridgeHandler.install(); -->
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>${lib.slf4j.version}</version>
		</dependency>
		<dependency>
			<!-- (TRACE �) DEBUG � INFO � WARN � ERROR � FATAL -->
			<!-- no activation in the code necessary -->
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${lib.slf4j.version}</version>
		</dependency>
		<dependency>
			<!-- (TRACE �) DEBUG � INFO � WARN � ERROR � FATAL -->
			<!-- no activation in the code necessary -->
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<version>${lib.slf4j.version}</version>
		</dependency>
		<dependency>
			<!-- remember to call: SysOutOverSLF4J.sendSystemOutAndErrToSLF4J(); -->
			<groupId>uk.org.lidalia</groupId>
			<artifactId>sysout-over-slf4j</artifactId>
			<version>${lib.sysout-over-slf4j.version}</version>
		</dependency>

		<!-- To once-and-for-all suppress commons-logging use no-commons-logging: 
			http://day-to-day-stuff.blogspot.com/2007/07/no-more-commons-logging.html -->
		<!-- <dependency> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> 
			<version>99.0-does-not-exist</version> </dependency> <dependency> <groupId>commons-logging</groupId> 
			<artifactId>commons-logging-api</artifactId> <version>99.0-does-not-exist</version> 
			</dependency> -->

		<!-- ************************ -->
		<!-- LOGGING (implementation) -->
		<!-- ************************ -->
		<!-- the slf4j implementation -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${lib.logback.version}</version>
		</dependency>

	</dependencies>

	<build>

		<filters>
			<filter>src/main/filters/filter.properties</filter>
		</filters>

		<plugins>
			<plugin>
				<groupId>org.dstovall</groupId>
				<artifactId>onejar-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>one-jar</goal>
						</goals>
						<configuration>
							<!-- Library version -->
							<onejarVersion>${lib.onejar.version}</onejarVersion>
							<!-- Main class -->
							<mainClass>alpha.startup.StartUp</mainClass>
							<!-- Optional, default is false -->
							<attachToBuild>true</attachToBuild>
							<!-- Optional, default is "onejar" -->
							<classifier>onejar</classifier>
							<destfile>alphomatic</destfile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.6</version>
				<executions>
					<execution>
						<id>alphomatic_package</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<!-- inside alphaflow/alphastartup/target/ -->
								<echo>INFO:
									${project.artifactId}-${project.version}.one-jar.jar
									-> alph-o-matic.jar</echo>
								<copy
									file="${project.build.directory}/${project.artifactId}-${project.version}.one-jar.jar"
									tofile="${project.build.directory}/alph-o-matic.jar"
									preservelastmodified="true" overwrite="true" />
								<!-- PREPARE-4-ProGuard (inside alphaflow/alphastartup/target/) -->
								<echo>INFO:
									alph-o-matic.zip => as input to ProGuard</echo>
								<copy
									file="${project.build.directory}/${project.artifactId}-${project.version}.one-jar.jar"
									tofile="${project.build.directory}/alph-o-matic.zip"
									preservelastmodified="true" overwrite="true" />
							</target>
						</configuration>
					</execution>
					<execution>
						<id>alphomatic_integration-test</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<!-- Copy One-Jar to Integration Environment: alphaflow/testrt/ -->
								<echo>INFO:
									alph-o-matic.jar into ../testrt/</echo>
								<copy
									file="${project.build.directory}/${project.artifactId}-${project.version}.one-jar.jar"
									tofile="../testrt/alph-o-matic.jar" preservelastmodified="true"
									overwrite="true" />
								<!-- Copy ProGuard to Integration Environment: alphaflow/testrt/ -->
								<!-- <copy -->
								<!-- file="${project.build.directory}/alph-o-matic.obf.jar" -->
								<!-- tofile="../testrt/alph-o-matic.obf.jar" preservelastmodified="true" -->
								<!-- overwrite="true" /> -->
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- UNDER CPN CONSTRUCTION -->
				<groupId>com.pyx4me</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<!-- READ: -->
				<!-- http://pyx4me.com/pyx4me-maven-plugins/proguard-maven-plugin/index.html -->
				<!-- http://proguard.sourceforge.net/index.html#/manual/usage.html -->
				<!-- http://proguard.sourceforge.net/index.html#/manual/examples.html -->
				<!-- http://stackoverflow.com/questions/4411689/using-proguard-with-a-library-has-a-service-bean-which-should-autowire -->
				<executions>
					<execution>
						<!-- commonly the phase would be package -->
						<phase>none</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<injar>alph-o-matic.zip</injar>
					<outjar>alph-o-matic.obf.jar</outjar>
					<inFilter>!**.java,!META-INF/INDEX.LIST,!META-INF/NOTICE.txt,!META-INF/LICENSE.txt,!overview.html,!META-INF/*.SF,!META-INF/*.RSA,!lib/drools-api-5.0.1.jar:org/drools/util/ChainedProperties.class</inFilter>
					<includeDependency>false</includeDependency>
					<obfuscate>false</obfuscate>
					<maxMemory>${pyx4me-proguard.maxmem}</maxMemory>
					<options>
						<option>-target ${jdk.version}</option>
						<option>-dontoptimize</option>
						<option>-dontpreverify</option>
						<!--This does NOT solve the OneJAR's JarClassLoader::access(..) problem: 
							<option>-dontskipnonpubliclibraryclassmembers</option> -->
						<option>-adaptresourcefilenames **.properties,**.gif,**.jpg,**.png</option>
						<option>-adaptresourcefilecontents
							**.properties,META-INF/MANIFEST.MF</option>
						<!-- APPLICATION: main -->
						<option>-keepclasseswithmembers public class alpha.startup.* {
							public static void main(java.lang.String[]); }</option>
						<option>-keep class alpha.startup.RuntimeJarnamePropertyDefiner
							{*;}</option>
						<!-- APPLICATION: Spring-managed -->
						<option>-keep @org.springframework.stereotype.Service class
							alpha.**</option>
						<option>-keep @org.springframework.stereotype.Component class
							alpha.**</option>
						<option>-keep @org.springframework.context.annotation.Scope class
							alpha.**</option>
						<option>-keepclassmembers class alpha.** {
							@org.springframework.beans.factory.annotation.Autowired *; }</option>
						<!-- ONE-JAR -->
						<option>-keep class OneJar {*;}</option>
						<option>-keep class com.simontuffs.onejar.** {*;}</option>
						<option>-keep class com.simontuffs.onejar.Boot$1 {*;}</option>
						<option>-keep class com.simontuffs.onejar.Boot$2 {*;}</option>
						<option>-keep class com.simontuffs.onejar.Boot$3 {*;}</option>
						<option>-keep class com.simontuffs.onejar.Handler$1 {*;}</option>
						<option>-keep class com.simontuffs.onejar.JarClassLoader$1 {*;}</option>
						<option>-keep class com.simontuffs.onejar.JarClassLoader$2 {*;}</option>
						<option>-keep class com.simontuffs.onejar.JarClassLoader$ByteCode
							{*;}</option>
						<option>-keep class com.simontuffs.onejar.JarClassLoader$1$1 {*;}</option>
						<option>-keep class com.simontuffs.onejar.JarClassLoader$1$1$1
							{*;}</option>
						<option>-keep class com.simontuffs.onejar.OneJarFile$1 {*;}</option>
						<!-- ALWAYS -->
						<option>-keepclassmembers enum * {public static **[] values();
							public static ** valueOf(java.lang.String);}</option>
						<option>-keepclassmembers class alpha.** implements
							java.io.Serializable
							{
							static final long serialVersionUID; private
							static final
							java.io.ObjectStreamField[] serialPersistentFields;
							private
							void
							writeObject(java.io.ObjectOutputStream); private void
							readObject(java.io.ObjectInputStream); java.lang.Object
							writeReplace(); java.lang.Object readResolve();}</option>
						<option>-keep class alpha.model.** {
							void set*(***);
							void set*(int,
							***);
							boolean is*();
							boolean is*(int);
							*** get*();
							*** get*(int); }
						</option>
						<!-- LIBRARIES -->
						<option>-keepattributes
							Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,EnclosingMethod</option>
						<!-- CONVENIENCE -->
						<option>-dontwarn java.**</option>
						<option>-dontwarn javax.**</option>
						<option>-dontwarn com.sun.**</option>
						<option>-dontwarn sun.**</option>
						<option>-dontwarn org.eclipse.**</option>
						<option>-dontwarn ch.qos.logback.**</option>
						<option>-dontwarn org.omg.**</option>
						<option>-dontwarn org.apache.**</option>
						<option>-dontwarn org.springframework.**</option>
						<option>-dontwarn com.thoughtworks.**</option>
						<option>-dontwarn org.drools.**</option>
						<option>-dontwarn org.antlr.**</option>
						<option>-dontwarn org.mvel2.**</option>
						<option>-dontwarn org.joda.**</option>
						<option>-dontwarn groovy.lang.**</option>
						<option>-keep class ch.qos.logback.core.ConsoleAppender {*;}</option>
						<option>-keep class ch.qos.logback.core.FileAppender {*;}</option>
						<option>-dontnote</option>
						<!-- CONVENIENCE -->
						<!--<option>-keepdirectories</option> -->
						<!--<option>-keepparameternames</option> -->
						<!-- TEMPORARILY TRYING TO SOLVE SOME PROBLEMS -->
						<!-- Does NOT solve the problem: <option>-keep class org.drools.util.ChainedProperties</option> -->
						<option>-ignorewarnings</option>
					</options>
					<libs>
						<lib>${java.home}/lib/rt.jar</lib>
						<lib>${java.home}/lib/jsse.jar</lib>
						<lib>${java.home}/lib/jce.jar</lib>
						<lib>${java.home}/lib/ext/bcmail-jdk16-146.jar</lib>
						<lib>${java.home}/lib/ext/bcpg-jdk16-146.jar</lib>
						<lib>${java.home}/lib/ext/bcprov-jdk16-146.jar</lib>
						<lib>${java.home}/lib/ext/dnsns.jar</lib>
						<lib>${java.home}/lib/ext/localedata.jar</lib>
						<lib>${java.home}/lib/ext/mail.jar</lib>
						<lib>${java.home}/lib/ext/sunjce_provider.jar</lib>
						<lib>${java.home}/lib/ext/sunmscapi.jar</lib>
						<lib>${java.home}/lib/ext/sunpkcs11.jar</lib>
					</libs>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard</artifactId>
						<version>${pluginlib.proguard.version}</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>

</project>
